'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDepth = getDepth;
exports.readFiles = readFiles;
exports.readFilesSync = readFilesSync;
exports.findSubDirectories = findSubDirectories;
exports.notSubDirectory = notSubDirectory;
exports.isSubDirectory = isSubDirectory;
exports.joinWith = joinWith;
exports.glob = glob;
exports.match = match;
exports.getStats = getStats;
exports.sizeMatcher = sizeMatcher;
exports.utimeMatcher = utimeMatcher;
exports.extMatcher = extMatcher;
exports.isDirectory = isDirectory;
exports.isVisibleFile = isVisibleFile;
exports.pathDepth = pathDepth;
exports.isHiddenDirectory = isHiddenDirectory;
exports.reducePaths = reducePaths;
exports.getFilesSync = getFilesSync;
exports.getFilesAsync = getFilesAsync;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _unitCompare = require('unit-compare');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fsp = _bluebird2.default.promisifyAll(_fs2.default);

function flatten(a, b) {
  return a.concat(b);
}

function hasParent(parent) {
  return parent && parent !== '/' && parent !== '.';
}

function getParent(dir) {
  return _path2.default.dirname(dir);
}

function getExt(file) {
  return _path2.default.extname(file).substring(1);
}

function getSubDirectories(base, allPaths) {
  return allPaths.filter(function (candidate) {
    return base !== candidate && isSubDirectory(base, candidate);
  });
}

function splitPath(dir) {
  return dir.split(_path2.default.sep);
}

function getDepth(root, dir) {
  return pathDepth(dir) - pathDepth(root);
}

function readFiles(dir) {
  return _bluebird2.default.resolve(fsp.readdirAsync(dir));
}

function readFilesSync(dir) {
  return _fs2.default.readdirSync(dir);
}

function findSubDirectories(paths) {
  return paths.map(function (path) {
    return getSubDirectories(path, paths);
  }).reduce(flatten, []);
}

function notSubDirectory(subDirs) {
  return function (path) {
    return !_lodash2.default.includes(subDirs, path);
  };
}

function isSubDirectory(base, candidate) {
  var parent = candidate;
  while (hasParent(parent)) {
    if (base === parent) {
      return true;
    }
    parent = getParent(parent);
  }
  return false;
}

function joinWith(dir) {
  return function (file) {
    return _path2.default.join(dir, file);
  };
}

function glob(pattern) {
  return function (fname) {
    var glob = new _minimatch2.default.Minimatch(pattern, {
      matchBase: true
    });
    return glob.match(fname);
  };
}

function match(pattern) {
  return function (fname) {
    return new RegExp(pattern).test(fname);
  };
}

function getStats(file) {
  return _fs2.default.statSync(file);
}

function sizeMatcher(sizeExpression) {
  return function (file) {
    var stats = getStats(file);
    return (0, _unitCompare.isNumber)(stats.size).assert(sizeExpression);
  };
}

function utimeMatcher(timeExpression, utime) {
  return function (file) {
    var mtime = getStats(file)[utime];
    return (0, _unitCompare.isDate)(mtime).assert(timeExpression);
  };
}

function extMatcher(extension) {
  return function (file) {
    return getExt(file) === extension;
  };
}

function isDirectory(file) {
  return getStats(file).isDirectory();
}

function isVisibleFile(path) {
  var pathParts = splitPath(path);
  return !/^\./.test(pathParts.pop());
}

function pathDepth(dir) {
  return splitPath(dir).length;
}

function isHiddenDirectory(dir) {
  return (/(^|\/)\.[^\/\.]/g.test(dir)
  );
}

function reducePaths(searchPaths) {
  if (searchPaths.length === 1) {
    return searchPaths;
  }

  var subDirs = findSubDirectories(searchPaths.sort());
  return searchPaths.filter(notSubDirectory(subDirs));
}

function getFiles(dir, read) {
  return read(dir).map(joinWith(dir));
}

function getFilesSync(dir) {
  return getFiles(dir, readFilesSync);
}

function getFilesAsync(dir) {
  return getFiles(dir, readFiles);
}