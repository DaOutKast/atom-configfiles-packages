'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _functions = require('./functions');

var _files = require('./files');

var files = _interopRequireWildcard(_files);

var _arrays = require('./arrays');

var arrays = _interopRequireWildcard(_arrays);

var _events = require('events');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isDefined(value) {
  return value !== undefined;
}

function flatten(a, b) {
  return a.concat(b);
}

var FileHound = function (_EventEmitter) {
  _inherits(FileHound, _EventEmitter);

  function FileHound() {
    _classCallCheck(this, FileHound);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FileHound).call(this));

    _this._filters = [];
    _this._searchPaths = [];
    _this._searchPaths.push(process.cwd());
    _this._ignoreHiddenDirectories = false;
    _this._isMatch = _lodash2.default.noop;
    return _this;
  }

  _createClass(FileHound, [{
    key: '_atMaxDepth',
    value: function _atMaxDepth(root, dir) {
      var fn = files.getDepth;
      return isDefined(this.maxDepth) && fn(root, dir) > this.maxDepth;
    }
  }, {
    key: '_shouldFilterDirectory',
    value: function _shouldFilterDirectory(root, dir) {
      return this._atMaxDepth(root, dir) || this._ignoreHiddenDirectories && files.isHiddenDirectory(dir);
    }
  }, {
    key: '_newMatcher',
    value: function _newMatcher() {
      var isMatch = (0, _functions.compose)(this._filters);
      if (this.negateFilters) {
        return (0, _functions.negate)(isMatch);
      }
      return isMatch;
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      this._isMatch = this._newMatcher();
    }
  }, {
    key: '_searchSync',
    value: function _searchSync(dir) {
      var root = dir;
      return this.search(root, dir, files.getFilesSync);
    }
  }, {
    key: '_searchAsync',
    value: function _searchAsync(dir) {
      var _this2 = this;

      var root = dir;
      return this.search(root, dir, files.getFilesAsync).each(function (file) {
        _this2.emit('match', file);
      });
    }
  }, {
    key: 'search',
    value: function search(root, dir, getFiles) {
      var _this3 = this;

      if (this._shouldFilterDirectory(root, dir)) return [];

      return getFiles(dir).map(function (file) {
        return files.isDirectory(file) ? _this3.search(root, file, getFiles) : file;
      }).reduce(flatten, []).filter(this._isMatch);
    }
  }, {
    key: 'getSearchPaths',
    value: function getSearchPaths() {
      var excludeSubDirs = files.reducePaths(this._searchPaths);
      return arrays.copy(excludeSubDirs);
    }
  }, {
    key: 'modified',
    value: function modified(pattern) {
      this.addFilter(files.utimeMatcher(pattern, 'mtime'));
      return this;
    }
  }, {
    key: 'accessed',
    value: function accessed(pattern) {
      this.addFilter(files.utimeMatcher(pattern, 'atime'));
      return this;
    }
  }, {
    key: 'changed',
    value: function changed(pattern) {
      this.addFilter(files.utimeMatcher(pattern, 'ctime'));
      return this;
    }
  }, {
    key: 'addFilter',
    value: function addFilter(filter) {
      this._filters.push(filter);
      return this;
    }
  }, {
    key: 'paths',
    value: function paths() {
      this._searchPaths = _lodash2.default.uniq(arrays.from(arguments));
      return this;
    }
  }, {
    key: 'path',
    value: function path() {
      this._searchPaths = arrays.fromFirst(arguments);
      return this;
    }
  }, {
    key: 'discard',
    value: function discard(pattern) {
      this.addFilter((0, _functions.negate)(files.match(pattern)));
      return this;
    }
  }, {
    key: 'ext',
    value: function ext(extension) {
      this.addFilter(files.extMatcher(extension));
      return this;
    }
  }, {
    key: 'size',
    value: function size(sizeExpression) {
      this.addFilter(files.sizeMatcher(sizeExpression));
      return this;
    }
  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      this.size(0);
      return this;
    }
  }, {
    key: 'glob',
    value: function glob(globPattern) {
      return this.match(globPattern);
    }
  }, {
    key: 'match',
    value: function match(globPattern) {
      this.addFilter(files.glob(globPattern));
      return this;
    }
  }, {
    key: 'not',
    value: function not() {
      this.negateFilters = true;
      return this;
    }
  }, {
    key: 'ignoreHiddenFiles',
    value: function ignoreHiddenFiles() {
      this.addFilter(files.isVisibleFile);
      return this;
    }
  }, {
    key: 'ignoreHiddenDirectories',
    value: function ignoreHiddenDirectories() {
      this._ignoreHiddenDirectories = true;
      return this;
    }
  }, {
    key: 'depth',
    value: function depth(_depth) {
      this.maxDepth = _depth;
      return this;
    }
  }, {
    key: 'find',
    value: function find(cb) {
      var _this4 = this;

      this._initFilters();

      var searchAsync = this._searchAsync.bind(this);
      var searches = _bluebird2.default.map(this.getSearchPaths(), searchAsync);

      return _bluebird2.default.all(searches).reduce(flatten).catch(function (e) {
        _this4.emit('error', e);
        throw e;
      }).asCallback(cb).finally(function () {
        _this4.emit('end');
      });
    }
  }, {
    key: 'findSync',
    value: function findSync() {
      this._initFilters();

      var searchSync = this._searchSync.bind(this);

      return this.getSearchPaths().map(searchSync).reduce(flatten);
    }
  }], [{
    key: 'create',
    value: function create() {
      return new FileHound();
    }
  }, {
    key: 'any',
    value: function any() {
      var args = arrays.from(arguments);
      return _bluebird2.default.all(args).reduce(flatten, []);
    }
  }]);

  return FileHound;
}(_events.EventEmitter);

module.exports = FileHound;